#!/bin/bash
# Starts a node-provisioning-service with docker
#
# (C) 2014 INAETICS, <www.inaetics.org> - Apache License v2.

#
# Config
#
VERBOSE_LOG=false
BUILDER_DIR="/var/lib/docker-image-builder"
BUILDER_REPO="https://github.com/INAETICS/docker-image-builder.git"
BUILDER_SCRIPT="docker-image-builder"
SERVICE_NAME="node-provisioning-service"
SERVICE_IMAGE="inaetics/node-provisioning:latest"
SERVICE_REPO="https://github.com/INAETICS/node-provisioning-service.git"
RETRY_INTERVAL=30
UPDATE_INTERVAL=300

#
# Global state
#
current_imageid=""
located_imageid=""
containerid=""

#
# Functions
#

verbose () {
  if $VERBOSE_LOG; then $@; else $@ &> /dev/null; fi
  return $?
}

verbose_err () {
  if $VERBOSE_LOG; then $@; else $@ 1> /dev/null; fi
  return $?
}

verbose_out () {
  if $VERBOSE_LOG; then $@; else $@ 2> /dev/null; fi
  return $?
}

update_builder () {
  if [ ! -d "$BUILDER_DIR" ]; then 
    echo "Cloning image builder"
    git clone $BUILDER_REPO $BUILDER_DIR
  else 
    echo "Updating image builder"
    cd $BUILDER_DIR
    git pull
  fi
  if [ $? -ne 0 ]; then
    echo "Builder update failed!" 1>&2
    return 1
  fi
  return 0
}

locate_image () {
  echo "Locating service image"
  located_imageid=$(verbose_out $BUILDER_DIR/$BUILDER_SCRIPT locate $SERVICE_IMAGE $SERVICE_REPO)
  if [ $? -ne 0 ]; then
    echo "Image locate failed!" 1>&2
    return 1
  fi
  echo "Located image ${located_image:0:12}"
  return 0
}

start_service () {
  echo "Starting service container"
  current_imageid=$located_imageid
  containerid=$(docker run -d -p 8080:8080 $current_imageid /tmp/node-provisioning.sh)
  if [ $? -ne 0 ]; then
    echo "Container start failed!" 1>&2
    if [ "$containerid" != "" ]; then
      docker rm -f $containerid
      containerid=""
    fi
    return 1
  fi
  echo "Started container ${containerid:0:12}"
  return 0 
}

stop_service () {
  echo "Stopping service container"
  if [ "$containerid" != "" ]; then
    docker rm -f $containerid
    echo "Stopped container ${containerid:0:12}"
    containerid=""
  fi
  return 0
}

clean_up () {
    echo "Running cleanup.."
    stop_service
    exit 0
}

#
# Main
#
trap clean_up SIGHUP SIGINT SIGTERM

for var in "$@"; do
  if [ "$var" == "-v" ]; then
echo "log is true"
    VERBOSE_LOG=true
  fi
done

echo "-----------------------------------------------------------------------"
echo "Starting service controller"
echo "-----------------------------------------------------------------------"
echo -e "VERBOSE LOG\t: $VERBOSE_LOG (use -v option to enable)"
echo -e "BUILDER_DIR\t: $BUILDER_DIR"
echo -e "BUILDER_REPO\t: $BUILDER_REPO"
echo -e "BUILDER_SCRIPT\t: $BUILDER_SCRIPT"
echo -e "SERVICE_NAME\t: $SERVICE_NAME"
echo -e "SERVICE_IMAGE\t: $SERVICE_IMAGE"
echo -e "SERVICE_REPO\t: $SERVICE_REPO"
echo -e "UPDATE_INTERVAL\t: $UPDATE_INTERVAL"
echo -e "RETRY_INTERVAL\t: $RETRY_INTERVAL"
echo "-----------------------------------------------------------------------"

while true; do

  verbose_err update_builder
  if [ $? -eq 0 ]; then
    verbose_err locate_image
    if [ $? -eq 0 ] && [ "$current_imageid" != "$located_imageid" ]; then
      if [ "$containerid" != "" ]; then
        echo "Restarting with image ${located_imageid:0:12}"
        verbose_err stop_service
        verbose_err start_service
      else
        echo "Starting with image ${located_imageid:0:12}"
        verbose_err start_service
      fi
    fi
  fi

  if [ "$containerid" == "" ]; then
    echo "Not running due to previous errors"
    echo "Will Retry in $RETRY_INTERVAL seconds..."
    sleep $RETRY_INTERVAL &
    wait $!
  else
    echo "Running in container ${containerid:0:12}"
    echo "Will check for updates in $UPDATE_INTERVAL seconds..."
    sleep $UPDATE_INTERVAL &
    wait $!
  fi

done
