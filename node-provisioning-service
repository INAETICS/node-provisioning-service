#!/bin/bash

# Control node-provisioning-service build|run|stop|start with docker
#
# This is just a very simple helper. Use docker directly
# for full options (see http://www.docker.com/)

COMMAND=$1

PWD=`pwd`
cd $(dirname $0)
cd $PWD

BUILDDIR="/tmp/builds"
if [ ! -d "$BUILDDIR" ]; then mkdir $BUILDDIR; fi


_locate_aptcacher () {
  # TODO locate in Etcd
  echo "172.17.8.200:3142"
}

_locate_jdkarchive () {
 echo `tools/java-installer/java-download`
}

build_image () {

  local builddir="/tmp/build-$RANDOM"
  mkdir $builddir
  rsync -av --delete --exclude=".git" --exclude=".vagrant"  . $builddir


  local aptcacher=`_locate_aptcacher`
  if [ ! "$aptcacher" == "" ]; then
    sed -i "/##APT_PROXY/ a\RUN echo \"Acquire::http::Proxy \\\\\"http://$aptcacher\\\\\";\" > /etc/apt/apt.conf.d/01proxy" $builddir/Dockerfile
  fi;

  local jdkarchive=`_locate_jdkarchive`
  if [ ! "$jdkarchive" == "" ]; then
    cp -v $jdkarchive $builddir/tools/java-installer
    sed -i "/##JDK_INSTALL/ a\ADD tools/java-installer /tmp/java-installer/\nRUN /tmp/java-installer/java-install; rm -Rf /tmp/java-installer" $builddir/Dockerfile
  fi

  docker build -t inaetics/node-provisioning $builddir
  rm -rf $builddir
}

start_up () {
  docker rm node-provisioning-service >/dev/null 2>/dev/null
  docker start node-provisioning-service >/dev/null 2>/dev/null
  if [ $? -gt 0 ]; then
    docker run --name node-provisioning-service -d -p 8080:8080 inaetics/node-provisioning /bin/bash -c "cd /tmp && java -Dgosh.args=--nointeractive -jar server-allinone.jar"
  fi
}

clean_up () {
    docker stop node-provisioning-service > /dev/null 2>/dev/null
    exit
}

case "$COMMAND" in
  build)
    echo "Building image inaetics/node-provisioning"
    build_image
    ;;
  run)
    echo "Running Node Agent Service" 
    start_up
    trap clean_up SIGHUP SIGINT SIGTERM
    while true; do sleep 10; done
    ;;
  start)
    echo "Starting Node Agent Service" 
    start_up
    ;;
  stop)
    echo "Stopping Node Agent Service" 
    clean_up
    ;;
  *)
    echo "Usage: $0 {build|run|start|stop}"
    exit 1
    ;;
esac

cd $PWD
exit 0
